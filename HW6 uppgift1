// DATA SPECIFICATION AND EXAMPLES
/**
 * A {Student} is a string, the string is that persons NIN
 * Invariant: Must be a string of a non-negative consisting of 10 numbers 
 * @example const S1 = "0101010101" 
 */
/** A {Course} is a pair of a courses code and its name, both strings
 * Invariant: Both paired elements must be strings
 * @example const course1 = pair("1DL201", "Programkonstruktion och Datastrukturer")
 * 
/** A {Current Course} is an array where the first element is a Course, the second is a list of students, and the third is the waiting list
 * Invariant: The first element must be a course, the second element cannot contain more than 40 elements
 * @example const current_PKD = [Course1, list_of_students1, waiting_list]
*/ 
/**
 * Apply a student to a course. If there's space, add the student to the course;
 * otherwise, add the student to the waiting list.
 * @param {Current Course} courseInfo - The current course information.
 * @param {Student} student - The student to apply.
 * @returns {string} - "Enrolled" if the student is enrolled, "Waiting List" if added to the waiting list,
 *                    "Already Enrolled" if the student is already enrolled, "Course Full" if both the course
 *                    and waiting list are full.
 */
function apply(CurrentCourse, student) {
    const course = CurrentCourse[0];
    const enrolledStudents = CurrentCourse[1];
    const waitingList = CurrentCourse[2];

    // Check if the student is already enrolled
    let alreadyEnrolled = false;
    for (let i = 0; i < array_length(enrolledStudents); i = i + 1) {
        if (enrolledStudents[i] === student) {
            alreadyEnrolled = true;
            break;
        }
    }

    const enrolledLen = array_length(enrolledStudents);
    const waitingLen = array_length(waitingList);

    if (alreadyEnrolled) {
        return "Already Enrolled";
    } else if (enrolledLen < 40) {
        enrolledStudents[enrolledLen] = student;
        return "Enrolled";
    } else if (waitingLen < 40) {
        waitingList[waitingLen] = student;
        return "Waiting List";
    } else {
        return "Course Full";
    }
}

/**
 * Withdraw a student from a course.
 * @param {Current Course} courseInfo - The current course information.
 * @param {Student} student - The student to withdraw.
 * @returns {string} - "Withdrawn" if the student is successfully withdrawn,
 *                    "Not Enrolled" if the student is not enrolled in the course.
 */
function withdraw(courseInfo, student) {
    const course = courseInfo[0];
    const enrolledStudents = courseInfo[1];
    const waitingList = courseInfo[2];

    // Check if the student is enrolled
    let isEnrolled = false;
    let indexInEnrolled = -1;
    for (let i = 0; i < array_length(enrolledStudents); i = i + 1) {
        if (enrolledStudents[i] === student) {
            isEnrolled = true;
            indexInEnrolled = i;
            break;
        }
    }

    if (isEnrolled) {
        // Shift elements in the enrolled students array without using array patterns
        let i = indexInEnrolled;
        while (i < array_length(enrolledStudents) - 1) {
            enrolledStudents[i] = enrolledStudents[i + 1];
            i = i + 1;
        }
        // Set the last element to undefined
        enrolledStudents[array_length(enrolledStudents) - 1] = undefined;

        return "Withdrawn";
    } else {
        return "Not Enrolled";
    }
}

// Example data
const S1 = "0101010101";
const S2 = "0101010102";
const S3 = "0101010103";
const S4 = "0101010104";
const course1 = pair("1DL201", "Programkonstruktion och Datastrukturer");
const list_of_students1 = list(S1, S2);
const waiting_list = list(S3, S4);
const current_PKD = [course1, list_of_students1, waiting_list];

// Applying a student to the course
apply(current_PKD, S2);
apply(current_PKD, S4);
withdraw(current_PKD, S2);
withdraw(current_PKD, S2);
apply(current_PKD, S2);

